/**	@page turtles Turtle Graphics
	It is recommended to read @ref window before continuing with this.
	<br> <br>
	Sometimes you'll feel that drawing to absolute coordinates is not the most comfortable way of achieving your goal. You'll think that something like a cursor to move around the screen would be useful to find the exact point where you want to draw, or maybe something that draws while it's moving around the screen would be an easier method to draw some figures. It's your lucky day, because you've thought about a Turtle.
	<br><br>
	The Turtles are cursors that can move freely on the screen and paint along its path or not (you choose it). A Turtle has essentially two variables or factors: its position (X and Y coordinates) and its direction (an Angle). This Angle is represented in the units of the Window (degrees by default). The angles are as if they were represented in the trigonometric circle, so for example 0&deg; would be a Turtle pointing to the right &rarr, and 90&deg; would be one that points up &uarr. You can check this Turtle's parameters with Window::t_getPos() and Window::t_heading().
	<br><br>
	As the Window, Turtles have some implicit parameters that are set when they're created, and can be changed over time. One of these parameters is the PaintBrush (a color and a line thickness) that they use to draw its path, and 2 flags: one that indicates if the Turtle is showing its cursor (at Turtle's position) and another that indicates if the Turtle paints its path when it moves. All these parameters can be modified wherever you want. But before talking about this, let's see how Turtles are created.
	<br><br>
	Window Add-on supports multiple Turtles at once. You can have multiple cursors moving around on the screen at the same time and they're all unique, their parameters are different based on how you set them up. So, for example you can have a code that has 3 Turtles, one with red drawing color, another with black color and the other with yellow drawing color. As you can imagine, all parameters mentioned before can be different for each Turtle.
	<br><br>
	When a Window object is created, it also creates a default Turtle for this Window that cannot be deleted (but it can be modified). Her name is Donatello. In other words, you'll always have at least one Turtle. All Turtles are created at Window::TURTLE_HOME position, so you'll find them there at first. However, you can change its position whenever you want with Window::t_setPos() function. All Turtle function names start with <em>t_</em>, so they are easy to identify and remember.
	<br><br>
	And here comes the important question: how do you interact with more than one Turtle?
	<br>
	<h2>Creating a Turtle</h2>
	To create a Turtle, you have to call the function Window::addTurtle(). This function has more than one way to be called, so you'll have to find out what is the best for you. All these calls have a thing in common: the new Turtle must have a name. The Turtles are identified by its name. As you can imagine, two Turtles cannot have the same name, this field must be unique. Once added, your Turtle will be placed at Window::TURTLE_HOME, with the set of parameters you've chosen.
	<br><br>
	If you want to interact with a Turtle, you'll have to call the method you want to run but with the first parameter being the name of that Turtle. For example:
	@code 
	Window w;
	
	w.addTurtle("myTurtleName");
	
	w.t_setPos("myTurtleName", 50, 50);
	@endcode
	But what if you only have one Turtle? Or what if you want to have multiple Turtles but only use mainly one? There's a solution for this: The <strong>Active Turtle</strong>.
	<h2> Active Turtle </h2>
	The Window always has an Active Turtle. This is a Turtle that has been marked as the main Turtle of the Window. This Turtle is special because you don't have to specify its name when calling a method on her. It is like the Window knows that you're talking about her. An example of how it works:
	@code
	Window w;
	
	w.addTurtle("myTurtleName");
	
	w.setActiveTurtle(myTurtleName");
	
	w.t_setPos(50, 50);
	@endcode
	With this piece of code, you can set your own Turtle as the active one. You will not have to specify its name on every method call. Note that if you're using more than one Turtle with the same regularity in your code, it's not as useful.
	<br><br>
	When you set a Turtle as the Active Turtle, the previous one will no longer be it and it will become a normal Turtle, and the new one will remain active until you call Window::setActiveTurtle() again or the Window is destroyed. By default, Donatello is the Active Turtle when you create a Window object, so if you only want to use one Turtle, you can use Active Turtle functions without having to know any Turtle name.
	
	@section move_turtle How to move the Turtle
	Once you have your Turtle set up, your next step is moving it. You can move your Turtles absolutely by setting its position with Window::t_setPos() or its orientation with Window::t_setHeading(). But there's a funnier way of doing it. You can also move the Turtles relative to its positions. If a Turtle is headed to a direction, you can tell her to move forward a number of distance units (in this case, pixels). 
	<br><br>
	So, for example, you can position your Turtle at the center of the screen and then move it 50 pixels upwards changing its absolute position.
	@include turtle_absolute.cpp
	And get this output:
	@image html turtle_absolute.png
	But doing it like that you are only teleporting the Turtle. If you want to paint the path of the Turtle you will not be able to do it like that.
	<br><br>
	So, let's explore the other way: tell the Turtle to move itself.
	<br><br>
	This way of moving the Turtle can be useful if your Turtle has to perform some operations sequentially on the screen, taking into account previous position and states.
	For example, let's do the same as before but with relative movement:
	@include turtle_relative.cpp
	You get this result:
	@image html turtle_relative.png
	As you can see, more things happened here. The Turtle moved across the screen instead of teleporting. So if your Turtle was set to paint its path (enabled by default), you would see a straight line between the initial and final position of the Turtle, as it happened. It is also more convenient. If you want to move to a non-defined point, say "50 pixels north and then 50 pixels west", you don't have to calculate these points, the Turtle does this job. 
	<br><br>
	If you want to stop the Turtle from drawing its path, use Window::t_penUp() (it's like lifting the pen and the tip of it doesn't touch the screen anymore). To re-enable this option, use Window::t_penDown(). If you lift the pen in the previous code, you would have this:
	@include turtle_penUp.cpp
	And get this output:
	@image html turtle_penUp.png
	<br>
	Also, if you want to hide Turtle's cursor (the arrow), you can use Window::t_hide(). To show it, as we've done before, use Window::t_show().
	<br><br>
	Another way of changing Turtle's direction or heading is rotating the turtle over itself a certain number of degrees instead of setting its orientation directly. The instructions Window::t_right() and Window::t_left() are the ones used to achieve this.
	@include turtle_leftRight.cpp
	This code will output:
	@image html turtle_leftRight.png
	
	<br><br>
	If you're using multiple Turtles, the only difference with the code above is that you will have to specify the name of the Turtle you want to move at each instruction. All @ref window_turtles work the same way as the ones above.
	
	@section turtle_motion Turtle Motion Modes
	As <i>Logo</i>, the Turtles in a Window can move in different ways. In summary: <br>
	<ul>
	<li><strong>Window Mode</strong>: When the turtle hits an edge, she can freely continue moving outside the visible range.</li>
	<li><strong>Fence Mode</strong>: When the Turtle hits and edge, she stops moving in that direction.</li>
	<li><strong>Wrap Mode</strong>: When the Turtle hits an edge gets teleported to the opposite edge.</li>
	</ul>
	<br>
	By <strong>default</strong>, every Turtle created is spawned in Window Mode. Let's provide a detailed description of how this three modes work.
	
		@subsection turtle_motion_window Window Mode
		In this mode you can move the Turtle freely in the 2D space of your Window, also in the part that is not visible. Yes, this region of the screen also exists and you can draw to it (but it's pretty useless). Let's see an example of how this mode works.
		<br>
		Here you have a piece of code that positions the turtle at the center of screen and moves it pointing to the right edge <i>WIDTH</i> units (width of the screen):
		@include turtle_motion_window.cpp
		And produces the following output:
		@image html turtle_motion_window.png
		As you can see, the Turtle's cursor is not visible anymore. This is because it has gone beyond the edge and remains outside the screen. You can continue using that Turtle, it's not lost, it's only not visible. If you move it towards the screen and position it somewhere inside the edges you'll see her again.
		
		@subsection turtle_motion_fence Fence Mode
		Using the same example as before, let's adapt it to the Fence Mode. This code:
		@include turtle_motion_fence.cpp
		Generates the following output:
		@image html turtle_motion_fence.png
		As expected, the Turtle stops moving when she hits the right edge.
		
		@subsection turtle_motion_wrap Wrap Mode
		Using again the same example, happens what you would expect: the Turtle hits the right edge and then teleports to the left edge, continuing her way. Let's check it out:
		@include turtle_motion_wrap.cpp
		Outputs:
		@image html turtle_motion_wrap.png
		As expected.
		<br><br>
*/